<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amigo on ivahaev.ru</title>
    <link>https://ivahaev.ru/tags/amigo/index.xml</link>
    <description>Recent content in Amigo on ivahaev.ru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <copyright>2016 Евгений Иваха</copyright>
    <atom:link href="https://ivahaev.ru/tags/amigo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Amigo – лучший друг Golang и Asterisk</title>
      <link>https://ivahaev.ru/post/amigo-best-frend-of-golang-and-asterisk/</link>
      <pubDate>Thu, 14 Jan 2016 21:52:24 +0500</pubDate>
      
      <guid>https://ivahaev.ru/post/amigo-best-frend-of-golang-and-asterisk/</guid>
      <description>&lt;p&gt;Начиная писать свой первый &lt;a href=&#34;http://peach-dialer.com&#34;&gt;Peach Dialer&lt;/a&gt;, я выбрал язык, который довольно хорошо знал, благо работал с ним с 1999 года&amp;nbsp;&amp;mdash; &lt;strong&gt;PHP&lt;/strong&gt;. Меня не смущало, что он, в принципе, не предназначен для создания долгоживущих процессов, но то, что получилось в итоге, работает по несколько месяцев и радует своих владельцев.&lt;/p&gt;

&lt;p&gt;Потом пошла мода на &lt;a href=&#34;https://ru.wikipedia.org/wiki/WebSocket&#34;&gt;Websocket&lt;/a&gt;, который захотелось применить в интерфейсе, а &lt;strong&gt;PHP&lt;/strong&gt; в то время не очень-то умел с ними работать (может, и сейчас не умеет). Я обратил внимание на &lt;a href=&#34;https://nodejs.org&#34;&gt;node.js&lt;/a&gt;. Классная штука, любовь на века, подумал я, но вскоре захотелось большего.&lt;/p&gt;

&lt;p&gt;Бо&amp;#769;льшим для меня стал &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;&amp;nbsp;&amp;mdash; язык, совмещающий скорость и удобство деплоя компилируемых языков с простотой разработки, свойственной интерпретируемым языкам. К сожалению, разработанных библиотек надлежащего качества и с ожидаемым функционалом для взаимодействия с &lt;strong&gt;Asterisk&lt;/strong&gt; в то время не было. Были какие-то начинания, но не доведённые до конца.&lt;/p&gt;

&lt;p&gt;Итак, по сусекам поскребя, да по амбару пометя&amp;#769;, испёк я &lt;a href=&#34;https://github.com/ivahaev/amigo&#34;&gt;Amigo&lt;/a&gt;&amp;nbsp;&amp;mdash; удобную библиотеку для работы с астериском посредством AMI протокола.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Установка библиотеки:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go get github.com/ivahaev/amigo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пример использования (здесь применяется ещё мой простой &lt;a href=&#34;https://github.com/ivahaev/go-logger&#34;&gt;логгер&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
    &amp;quot;github.com/ivahaev/amigo&amp;quot;
    &amp;quot;github.com/ivahaev/go-logger&amp;quot;
)

// Создаем функции-обработчики событий
// amigo.M – это псевдоним для map[string]string
func DeviceStateChangeHandler (m amigo.M) {
    logger.Debug(`Принято событие &amp;quot;DeviceStateChange&amp;quot;`, m)
}

func DefaultHandler (m amigo.M) {
    logger.Debug(&amp;quot;Принято событие&amp;quot;, m)
}


func main() {

    // Подключаемся к астериску.
    // Имя пользователя и пароль являются обязательными параметрами.
    // По умолчанию хост – &amp;quot;127.0.0.1&amp;quot;, порт – &amp;quot;5038&amp;quot;.
    a := amigo.New(&amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;, &amp;quot;host&amp;quot;, &amp;quot;port&amp;quot;)
    a.Connect()


    //Регистрируем обработчик для события &amp;quot;DeviceStateChange&amp;quot;
    a.RegisterHandler(&amp;quot;DeviceStateChange&amp;quot;, DeviceStateChangeHandler)

    // Регистрируем обработчик для всех событий
    a.RegisterDefaultHandler(DefaultHandler)

    // Также можем создать канал для приема всех событий
    // и зарегистрировать его
    c := make(chan map[string]string, 100)
    a.SetEventChannel(c)


    // Проверим, что подключение успешно и отправим запрос &amp;quot;QueueSummary&amp;quot;
    if a.Connected() {
        result, err := a.Action(amigo.M{&amp;quot;Action&amp;quot;: &amp;quot;QueueSummary&amp;quot;, &amp;quot;ActionID&amp;quot;: &amp;quot;Init&amp;quot;})
        // Проверяем на ошибку и обрабатываем результат. Ответ на запрос придёт в соответствующем событии.
        // Ловить его нужно в общем канале, обработчике по умолчанию, либо в специальном обработчике.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Стоит заметить, что подключение будет автоматически восстанавливаться при обрыве связи.&lt;/p&gt;

&lt;p&gt;В следующий раз расскажу как использовать библиотеку в режиме &lt;strong&gt;ASYNC:AGI&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>